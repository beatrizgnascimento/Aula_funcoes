Funções

- Blocos de código (declarações e outros comandos) que podem ser nomeados e chamados dentro de um programa
- Objetivos:
  - Estruturação dos programas: programa construído a partir de pequenos blocos de códigos com uma tarefa específica e bnem-definida
   Programas grandes e complexos são construídos com Funções
  - Reutilização do código: Definir função para calcular o fatorial de determinado número, essa função pode ser reutilizada diversas vezes em pontos diferentes do programa
  O uso de funções evita a cópia desnecessária de trechos de código que realizam a mesma tarefa, diminuindo o tamanho do programa

  Declaração de funções
  tipo nome_função (lista de parametros)
  {
    sequência de declarações e comandos
    return expressão;
  }

  nome:identificador ou nome: sqrt etc
  Lista de parametros: variaveis na função 
  expressão: indica o valor devolvido ao finalizar

  ex de funções:
  double sqrt(double y)
  {
    double x;
    return x;
  }

  double pow(double b, double a)
  {

  }

  rand() - não recebe parâmetro, mas devolve um inteiro

  int strcmp(char a[], char b[])
  {

  }

  Exemplo de soma de números
  int soma(int num1, int num2, int num3)
  {
    int resposta;
    resposta = num1 + num2 + num3;
    return resposta;
  }

  Protótipos de funções
  -Antes do main() é o seu Protótipos
  FAZER ASSIM!!
  #include <stdio.h>
  int cubo(int n);

  int main()
  {
    int x = 2, y;
    y = cubo(x);

    printf("%d", y);
    return 0;
  }

  int cubo(int n)
  {
    return (n * n * n);
  }

  Declarada antes do main()

  Depois do main()
  tipo nome_função (lista parametros);

  Parâmetros de uma função
  - Lista de variáveis separadas por vírgulas em que são especificados o tipo e o nome de cada variável passada para a função

  ex: int soma(int x, int y)// Sempre especificar o tipo antes do nome
  {
    return x + y;
  }

  Dependendo da função ela pode não ter nenhum Parâmetros
  declaradas sem nenhuma variável dentro dos parenteses ou com a palavra void entre eles
  tipo função()
  ou
  tipo função(void)

  Funções que recebem Parâmetros
  -Passagem por valor 
    Recebe uma cópia dos valores dos parâmetros
  -Passagem por referência

  Corpo da função
  Formado por declarações de variáveis, constantes, arrays etc
  Formado por sequências de comandos condiconais, de repetição e chamada de outras funções

  Ex: Cálculo de fatorial

  Sem função

  #include <stdio.h>
  #include <stdlib.h>
  int main(){
    printf(“Digite um numero inteiro positivo:”);
    int x;
    scanf(“%d”,&x);

    int i,f = 1;

    for (i=1; i<=x; i++)
    f = f * i;
    printf(“O fatorial de %d eh: %d\”,x,f);
 
 return 0;
}

Com função
#include <stdio.h>
#include <stdlib.h>

int fatorial (int n){
  int i, f = 1;

  for (i=1; i<=n; i++)
    f = f * i;
    return f;
  }

int main(){

  printf(“Digite um numero inteiro positivo:”);
  int x;
  scanf(“%d”,&x);

  int fat = fatorial(x);
  printf(“O fatorial de %d eh: %d\n”,x,fat);
 
 return 0;
}

Retorno da função
- Forma com a qual a função retorna o resutlado
- Tipos básicos predefnidos: int, char, float, double, void
- Tipos definidos pelo programador: struct, array etc

Funções sem retorno de valor
#include <stdio.h>
#include <stdlib.h>

  void imprime(int n){ //Void apenas executa um comanbdo sem devolver nenhum valor
  int i;
  for (i=1; i<=n; i++)
  printf(“Linha %d \n”,i);
}

int main(){

 imprime(5);
 
 return 0;
}

Funções com retorno de valor
return expressão;

"expressão" é qualquer constante, variável ou expressão aritmética

#include <stdio.h>
#include <stdlib.h>
int soma(int x, int y){
 return x + y;
}

O valor de retorno da função não pode ser um array

Passagem por referência
- Muda os valores originais de uma variável passada para a função, como scanf()
se passa para a função os endereços das variáveis na memória
é enviado para a função o endereço de memória onde a variável está armazenada e não apenas a cópia de seu valor
Usamos o * na frente do nome do parâmetro durante a declaração da função

void soma(int *n)
{
  *n = *n + 1;
}

Colocar o & na frente do nome da variável que será passada por referência para a função
include <stdio.h>
include <stdlib.h>
void soma _ mais _ um(int *n){
 *n = *n + 1;
 printf(“Dentro da funcao: x = %d\n”,*n); //6
}
int main(){
 int x = 5;
 printf(“Antes da funcao: x = %d\n”,x); //5
 soma _ mais _ um(&x);
 printf(“Depois da funcao: x = %d\n”,x); //6
 
 return 0;
}

#include <stdio.h>
#include <stdlib.h>
void Troca(int*a,int*b){
 int temp;
 temp = *a;
 *a = *b;
 *b = temp;
 printf(“Dentro: %d e %d\n”,*a,*b);
}
int main(){
 int x = 2;
 int y = 3;
 printf(“Antes: %d e %d\n”,x,y);
 Troca(&x,&y);
 printf(“Depois: %d e %d\n”,x,y);
 system(“pause”);
 return 0;
}

Passagem de arrays como parâmetros
Todas equivalentes
void imprime (int *m, int n);
void imprime (int m[], int n);
void imprime (int m[5], int n);

#include <stdio.h>
#include <stdlib.h>
void imprime (int *n, int m){
 int i;
 for (i=0; i<m;i++)
printf(“%d \n”, n[i]);
}

int main(){
 int v[5] = {1,2,3,4,5};
 imprime(v,5);

 return 0;
}

Arrays com mais de uma dimensão
void imprime (int m[][5], int n);
//4linhas 5 colunas
sempre 5 col mas quantas linhas quiser (parâmetro n)

void imprime _ matriz(int m[][2], int n){
 int i,j;
 for (i=0; i<n;i++)
 for (j=0; j< 2;j++)
 printf(“%d \n”, m[i][j]);

 int main(){
 int mat[3][2] = {{1,2},{3,4},{5,6}};
 imprime _ matriz(mat,3);


Passagem de estruturas como ponteiros
#include <stdio.h>
#include <stdlib.h>
struct ponto {
 int x, y;
};
void imprime(struct ponto p){
 printf(“x = %d\n”,p.x);
 printf(“y = %d\n”,p.y);
}

int main(){
 struct ponto p1 = {10,20};
 imprime(p1);

 Estruturas por referência
 #include <stdio.h>
#include <stdlib.h>
struct ponto {
 int x, y;
};
void soma _ imprime _ valor(int *n){
 *n = *n + 1;
 printf(“Valor = %d\n”,*n);
}

int main(){
 struct ponto p1 = {10,20};
 soma _ imprime _ valor(&p1.x);
 soma _ imprime _ valor(&p1.y);
 
 return 0;
}

#include <stdio.h>
#include <stdlib.h>
struct ponto {
 int x, y;
};
void atribui(struct ponto *p){
 (*p).x = 10; //x passado como referência
 *p.x ou *(p.x) //equivalentes
 (*p).y = 20;
}
int main(){
 struct ponto p1;
 atribui(&p1);
 printf(“x = %d\n”,p1.x);
 printf(“y = %d\n”,p1.y);
 system(“pause”);
 return 0;
}

operador seta para acessar membros da struct
- Acesso da estrutura fora da função sem precisar usar*

//sem operador seta
struct pontos{
  int x,y;
}

void atribuicao(struct ponto *p)
{
  (*p).x = 10;
  (*p).y = 20;
}

//com operador seta
struct pontos{
  int x, y;
}

void atribuicao(struct ponto *p)
{
  p ->x = 10;
  p->y = 20;
}